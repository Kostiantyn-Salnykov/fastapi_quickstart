version: 3

includes:
  test:
    taskfile: ./tests/Taskfile.yaml
  mig:
    taskfile: ./migrations/Taskfile.yaml

vars:
  RUNNER: "uv run"

dotenv:
  - ".env"

tasks:
  install:local:
    desc: "Install all dependencies (for local development)."
    cmds:
      - 'uv sync --group local --frozen {{.CLI_ARGS}}'

  install:local_fresh:
    desc: "Install all dependencies (for local development)."
    cmds:
      - 'uv sync --group local --reinstall --frozen {{.CLI_ARGS}}'

  install:dev:
    desc: "Install all dependencies (for development)."
    cmds:
      - 'uv sync --no-group local --group test --group linters --frozen {{.CLI_ARGS}}'

  install:
    desc: "Install all dependencies (for production)."
    cmds:
      - 'uv sync {{.CLI_ARGS}}'

  tree:
    desc: "Show the tree of installed dependencies."
    cmds:
      - 'uv tree --depth 2 --color always {{.CLI_ARGS}}'

  lint:
    desc: "Run linters, not change code."
    vars:
      ABSOLUTE: "A"
      MODULES: "A"
      AVERAGE: "A"
      EXCLUDE: "tests*"
    cmds:
      - '{{.RUNNER}} xenon . -b {{.ABSOLUTE}} -m {{.MODULES}} -a {{.AVERAGE}} -e "{{.EXCLUDE}}"'
      - "{{.RUNNER}} ruff check ."
    ignore_error: true


  lint:docs:
    desc: "Run coverage for documentation."
    summary: "Default usage: `task lint:docs`. Extended usage: `task lint:docs -- v` (Increasing verbosity level to `-vv`, `-v` by default)."
    cmd: "{{.RUNNER}} interrogate {{.VERBOSITY}}{{.CLI_ARGS}}"
    vars:
      VERBOSITY: "-v"

  lint:types:
    desc: "Run mypy (type annotations linter)."
    cmd: "{{.RUNNER}} mypy ."

  lint:plus:
    desc: "Run all linters and ignore errors."
    cmds:
      - task: lint
      - task: lint:docs
      - task: lint:types
    ignore_error: true

  format:
    desc: "Run formatters and auto fixing errors."
    cmds:
      - "{{.RUNNER}} ruff format"
      - "{{.RUNNER}} ruff check . --fix"

  pre:
    desc: "Run `format` then `lint`."
    cmds:
      - task: format
      - task: lint
      - task: test:cov

  run:gunicorn:
    desc: "Start web server via `Gunicorn` (production mode)."
    cmd: "{{.RUNNER}} gunicorn {{.APP_MODULE_PATH}} -c gunicorn.conf.py"

  run:granian:
    desc: "Start web server via `Granian` (development mode)."
    cmd: '{{.RUNNER}} granian --interface asgi {{.APP_MODULE_PATH}} --host {{.SERVER_HOST}} --port {{.SERVER_PORT}} --log --access-log --reload --reload-paths apps/ --reload-paths .env {{.CLI_ARGS}}'

  run:uvicorn:
    desc: "Start web server via `Uvicorn` (development mode)."
    cmd: '{{.RUNNER}} uvicorn {{.APP_MODULE_PATH}} --host {{.SERVER_HOST}} --port {{.SERVER_PORT}} --reload --reload-dir "src" --reload-include ".env" {{.CLI_ARGS}}'

  run:fastapi:
    desc: "Start web server via 'FastAPI' CLI (development mode)"
    cmd: "{{.RUNNER}} fastapi dev apps/__main__.py --app app --host {{.SERVER_HOST}} --port {{.SERVER_PORT}} --reload --root-path ./"

  run:
    desc: "Run migrations and then start web."
    cmds:
      - task: mig:head
      - task: run:gu

  req:
    desc: "Generate main `requirements.txt` file from Poetry."
    vars:
      FORMAT: "requirements.txt"
    cmd: "poetry export --without-hashes --only main -f {{.FORMAT}} -o requirements.txt"
