[tool.poetry]
name = "fastapi-quickstart"
version = "0.0.1"
description = ""
authors = ["Kostiantyn Salnykov <kostiantyn.salnykov@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = []

[tool.poetry.dependencies]
python = "^3.12"
alembic = "^1.13.0"
asyncpg = "^0.29.0"
bcrypt = "^4.1.2"
boto3 = "^1.34.51"
casbin = "^1.35.0"
fastapi = {extras = ["standard"], version = "^0.110.0"}
gunicorn = "^21.2.0"
httpx = "^0.27.0"
orjson = "^3.9.12"
pendulum = "^3.0.0"
phonenumbers = "^8.13.28"
psycopg2-binary = "^2.9.9"
pydantic = {extras = ["email"], version = "^2.5.2"}
pydantic-settings = {extras = ["dotenv"], version = "^2.1.0"}
PyJWT = "^2.8.0"
redis = {extras = ["hiredis"], version = "^5.0.1"}
setuptools = "^69.0.2"
SQLAlchemy = {extras = ["asyncio", "mypy"], version = "^2.0.25"}
typer = {extras = ["all"], version = "^0.9.0"}
uuid7 = "^0.1.0"
uvicorn = {extras = ["standard"], version = "^0.27.1"}
casbin-async-sqlalchemy-adapter = "^1.4.0"


[tool.poetry.group.lint.dependencies]
mypy = "~1.8.0"
ruff = "~0.2.2"
xenon = "~0.9.1"
interrogate = "~1.5.0"


[tool.poetry.group.test.dependencies]
factory-boy = "~3.3.0"
Faker = "~18.13.0"
pytest = "~7.4.4"
pytest-alembic = "~0.10.7"
pytest-asyncio = "~0.21.1"
pytest-clarity = "~1.0.1"
pytest-cov = "~4.1.0"
pytest-mock = "~3.12.0"
pytest-randomly = "~3.15.0"
pytest-sugar = "~0.9.7"


[tool.poetry.group.dev.dependencies]
boto3-type-annotations-with-docs = "^0.3.1"
bump-pydantic = "^0.6.1"
ipython = "^8.20.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# === Pytest ===
[tool.pytest.ini_options]
markers = [
    'debug: marks tests as debug (deselect with -m "not debug")',
]
#addopts = """\
#--maxfail=1
#-rf
#--test-alembic
#--randomly-dont-reset-seed
#"""
norecursedirs = ["venv", ".venv", ".env", "migrations",]
testpaths = ["tests",]
python_files = ["test*.py", "*test.py"]
python_functions = ["*_test", "test_*"]
console_output_style = "progress"
asyncio_mode = "auto"
log_cli = true
pytest_alembic_tests_folder = "tests/migrations"

# === Coverage ===
[tool.coverage.run]
parallel = true
sigterm = true
branch = true
source = ["apps",]
omit = ["*/*.local/*", "*/*.idea*/*", "*/*.venv*/*", "*/*test*", "*__init__*", "*/*migrations*" , "*/*interfaces.py"]

[tool.coverage.report]
ignore_errors = true
sort = "-cover"
precision = 2
omit = ["*/*.local/*", "*/*.idea*/*", "*/*.venv*/*", "*/*test*", "*__init__*", "*/*migrations*" , "*/*interfaces.py"]
exclude_lines = [
    "pragma: no cover",
    "if __name__ = .__main__.:",
    "@abc",
    "@abstract",
]

[tool.coverage.html]
directory = ".coverage_dir"

[tool.mypy]
python_version = "3.11"
files = ['*.py', '**/*.py']
exclude = ["docs*", "coverage", "tests"]
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
no_site_packages = true
follow_imports = "skip"
ignore_missing_imports = true
strict_optional = false
warn_return_any = false
warn_unused_ignores = true
show_error_codes = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
#disallow_any_unimported = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# === Ruff ===
[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "ANN",  # flake8-annotations
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",  # pycodestyle (error)
    "EM",  # flake8-errmsg
    "F",  # Pyflakes
    "FBT",  # flake8-boolean-trap
    "FLY",  # flynt
    "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "N",  # PEP8-naming
    "PERF",  # Perflint
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RUF",  # Ruff linter
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "T20",  # flake8-print
    "UP", # pyupgrade
    "W",  # pycodestyle (warning)
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "B008",  # Do not perform function call {name} in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    "B026",  # Star-arg unpacking after a keyword argument is strongly discouraged
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in `__init__`
    "F403",  # from {name} import * used; unable to detect undefined names
    "G004",  # Logging statement uses f-string
    "N805",  # The First argument of a method should be named self
    "PLR0913",  # Too many arguments in function definition ({c_args} > {max_args})
    "S104",  # Possible binding to all interfaces
    "S105",  # Possible hardcoded password assigned to: "{STRING}"
]
[tool.ruff.lint.extend-per-file-ignores]
"test*.py" = ["S101", "S106", "S311", "D", "ANN001", "ANN002", "ANN003", "ANN401"]
"migrations**" = ["ANN"]
"loggers.py" = ["ANN002", "ANN003"]
"cli.py" = ["ANN002", "ANN003"]
"helpers.py" = ["ANN401", "ANN002", "ANN003"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

# === Interrogate ===
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = true
fail-under = 90
exclude = ["setup.py", "docs", "build", "tests", "migrations", "venv", ".venv"]
ignore-regex = [".*Base*.", ".*Interface*."]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
#generate-badge = "."
#badge-format = "svg"