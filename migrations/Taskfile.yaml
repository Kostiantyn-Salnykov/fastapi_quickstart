version: 3

tasks:
  default:
    aliases: ["head"]
    desc: "Run migrations to `head`."
    cmd: "{{.RUNNER}} alembic upgrade head"

  new:
    desc: "Autogenerate migration"
    requires:
      vars:
        - ID
        - MSG
    cmd: "{{.RUNNER}} alembic revision --autogenerate --rev-id {{.ID}} -m {{.MSG}}"

  sql:
    desc: "Generate .sql migration for specified revision"
    summary: |
      Generates .sql migration for specified revision by `ID`.
      You can also merge multiple migrations in one file, just provide `END_ID` variable.
      Example: task mig:sql ID=0001 END_ID=0002
    requires:
      vars: [ID]
    cmd: >
      {{.RUNNER}} alembic upgrade
      {{if and .END_ID .ID }}
      {{.ID}}:{{.END_ID}}
      {{else}}
      {{.ID}}
      {{end}}
      --sql

  base:
    desc: "Downgrade migration to `base`."
    prompt: "Are you sure that you need to roll back all migrations? All existing data will be removed from DB!"
    aliases: ["zero"]
    cmd: "{{.RUNNER}} alembic downgrade base"

  current:
    desc: "Returns information about `current` migration applied."
    cmd: "{{.RUNNER}} alembic current"

  up:
    desc: "Upgrade `+1` migration from `current`."
    cmd: "{{.RUNNER}} alembic upgrade +1"
    ignore_error: true

  down:
    desc: "Downgrade `-1` migration from `current`."
    cmd: "{{.RUNNER}} alembic downgrade -1"

  check:
    desc: "Check for new upgrade operations."
    cmd: "{{.RUNNER}} alembic check"

  show:
    desc: "Get details about migration by revision ID."
    cmd: "{{.RUNNER}} alembic show {{.ID}}"
    requires:
      vars:
        - ID
    ignore_error: true

  move:
    desc: "Move migration to revision ID (but doesn't apply it)."
    cmd: "{{.RUNNER}} alembic stamp {{.ID}}"
    requires:
      vars:
        - ID
    ignore_error: true

  history:
    desc: "Draw all migration's history output."
    summary: "Returns migration's history output, latest at the start and then older."
    cmd: "{{.RUNNER}} alembic history"
